/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PublicRegisterRouteImport } from './routes/_public/register'
import { Route as PublicLoginRouteImport } from './routes/_public/login'
import { Route as PublicForgotPasswordRouteImport } from './routes/_public/forgot-password'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedUsersIndexRouteImport } from './routes/_authenticated/users/index'
import { Route as AuthenticatedTasksIndexRouteImport } from './routes/_authenticated/tasks/index'
import { Route as AuthenticatedSubjectsIndexRouteImport } from './routes/_authenticated/subjects/index'
import { Route as AuthenticatedUsersUserIdRouteImport } from './routes/_authenticated/users/$userId'
import { Route as AuthenticatedTasksCreateRouteImport } from './routes/_authenticated/tasks/create'
import { Route as AuthenticatedTasksTaskIdRouteImport } from './routes/_authenticated/tasks/$taskId'
import { Route as AuthenticatedSubjectsCreateRouteImport } from './routes/_authenticated/subjects/create'
import { Route as AuthenticatedSubjectsSubjectIdRouteImport } from './routes/_authenticated/subjects/$subjectId'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRegisterRoute = PublicRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => PublicRoute,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)
const PublicForgotPasswordRoute = PublicForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => PublicRoute,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedUsersIndexRoute = AuthenticatedUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedTasksIndexRoute = AuthenticatedTasksIndexRouteImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedSubjectsIndexRoute =
  AuthenticatedSubjectsIndexRouteImport.update({
    id: '/subjects/',
    path: '/subjects/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedUsersUserIdRoute =
  AuthenticatedUsersUserIdRouteImport.update({
    id: '/users/$userId',
    path: '/users/$userId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedTasksCreateRoute =
  AuthenticatedTasksCreateRouteImport.update({
    id: '/tasks/create',
    path: '/tasks/create',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedTasksTaskIdRoute =
  AuthenticatedTasksTaskIdRouteImport.update({
    id: '/tasks/$taskId',
    path: '/tasks/$taskId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedSubjectsCreateRoute =
  AuthenticatedSubjectsCreateRouteImport.update({
    id: '/subjects/create',
    path: '/subjects/create',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedSubjectsSubjectIdRoute =
  AuthenticatedSubjectsSubjectIdRouteImport.update({
    id: '/subjects/$subjectId',
    path: '/subjects/$subjectId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/forgot-password': typeof PublicForgotPasswordRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/subjects/$subjectId': typeof AuthenticatedSubjectsSubjectIdRoute
  '/subjects/create': typeof AuthenticatedSubjectsCreateRoute
  '/tasks/$taskId': typeof AuthenticatedTasksTaskIdRoute
  '/tasks/create': typeof AuthenticatedTasksCreateRoute
  '/users/$userId': typeof AuthenticatedUsersUserIdRoute
  '/subjects': typeof AuthenticatedSubjectsIndexRoute
  '/tasks': typeof AuthenticatedTasksIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/forgot-password': typeof PublicForgotPasswordRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/subjects/$subjectId': typeof AuthenticatedSubjectsSubjectIdRoute
  '/subjects/create': typeof AuthenticatedSubjectsCreateRoute
  '/tasks/$taskId': typeof AuthenticatedTasksTaskIdRoute
  '/tasks/create': typeof AuthenticatedTasksCreateRoute
  '/users/$userId': typeof AuthenticatedUsersUserIdRoute
  '/subjects': typeof AuthenticatedSubjectsIndexRoute
  '/tasks': typeof AuthenticatedTasksIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_public/forgot-password': typeof PublicForgotPasswordRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/register': typeof PublicRegisterRoute
  '/_authenticated/subjects/$subjectId': typeof AuthenticatedSubjectsSubjectIdRoute
  '/_authenticated/subjects/create': typeof AuthenticatedSubjectsCreateRoute
  '/_authenticated/tasks/$taskId': typeof AuthenticatedTasksTaskIdRoute
  '/_authenticated/tasks/create': typeof AuthenticatedTasksCreateRoute
  '/_authenticated/users/$userId': typeof AuthenticatedUsersUserIdRoute
  '/_authenticated/subjects/': typeof AuthenticatedSubjectsIndexRoute
  '/_authenticated/tasks/': typeof AuthenticatedTasksIndexRoute
  '/_authenticated/users/': typeof AuthenticatedUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/subjects/$subjectId'
    | '/subjects/create'
    | '/tasks/$taskId'
    | '/tasks/create'
    | '/users/$userId'
    | '/subjects'
    | '/tasks'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/subjects/$subjectId'
    | '/subjects/create'
    | '/tasks/$taskId'
    | '/tasks/create'
    | '/users/$userId'
    | '/subjects'
    | '/tasks'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_public'
    | '/_authenticated/dashboard'
    | '/_public/forgot-password'
    | '/_public/login'
    | '/_public/register'
    | '/_authenticated/subjects/$subjectId'
    | '/_authenticated/subjects/create'
    | '/_authenticated/tasks/$taskId'
    | '/_authenticated/tasks/create'
    | '/_authenticated/users/$userId'
    | '/_authenticated/subjects/'
    | '/_authenticated/tasks/'
    | '/_authenticated/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/register': {
      id: '/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicRegisterRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/forgot-password': {
      id: '/_public/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof PublicForgotPasswordRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/users/': {
      id: '/_authenticated/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/tasks/': {
      id: '/_authenticated/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof AuthenticatedTasksIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/subjects/': {
      id: '/_authenticated/subjects/'
      path: '/subjects'
      fullPath: '/subjects'
      preLoaderRoute: typeof AuthenticatedSubjectsIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/users/$userId': {
      id: '/_authenticated/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof AuthenticatedUsersUserIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/tasks/create': {
      id: '/_authenticated/tasks/create'
      path: '/tasks/create'
      fullPath: '/tasks/create'
      preLoaderRoute: typeof AuthenticatedTasksCreateRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/tasks/$taskId': {
      id: '/_authenticated/tasks/$taskId'
      path: '/tasks/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof AuthenticatedTasksTaskIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/subjects/create': {
      id: '/_authenticated/subjects/create'
      path: '/subjects/create'
      fullPath: '/subjects/create'
      preLoaderRoute: typeof AuthenticatedSubjectsCreateRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/subjects/$subjectId': {
      id: '/_authenticated/subjects/$subjectId'
      path: '/subjects/$subjectId'
      fullPath: '/subjects/$subjectId'
      preLoaderRoute: typeof AuthenticatedSubjectsSubjectIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedSubjectsSubjectIdRoute: typeof AuthenticatedSubjectsSubjectIdRoute
  AuthenticatedSubjectsCreateRoute: typeof AuthenticatedSubjectsCreateRoute
  AuthenticatedTasksTaskIdRoute: typeof AuthenticatedTasksTaskIdRoute
  AuthenticatedTasksCreateRoute: typeof AuthenticatedTasksCreateRoute
  AuthenticatedUsersUserIdRoute: typeof AuthenticatedUsersUserIdRoute
  AuthenticatedSubjectsIndexRoute: typeof AuthenticatedSubjectsIndexRoute
  AuthenticatedTasksIndexRoute: typeof AuthenticatedTasksIndexRoute
  AuthenticatedUsersIndexRoute: typeof AuthenticatedUsersIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedSubjectsSubjectIdRoute: AuthenticatedSubjectsSubjectIdRoute,
  AuthenticatedSubjectsCreateRoute: AuthenticatedSubjectsCreateRoute,
  AuthenticatedTasksTaskIdRoute: AuthenticatedTasksTaskIdRoute,
  AuthenticatedTasksCreateRoute: AuthenticatedTasksCreateRoute,
  AuthenticatedUsersUserIdRoute: AuthenticatedUsersUserIdRoute,
  AuthenticatedSubjectsIndexRoute: AuthenticatedSubjectsIndexRoute,
  AuthenticatedTasksIndexRoute: AuthenticatedTasksIndexRoute,
  AuthenticatedUsersIndexRoute: AuthenticatedUsersIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface PublicRouteChildren {
  PublicForgotPasswordRoute: typeof PublicForgotPasswordRoute
  PublicLoginRoute: typeof PublicLoginRoute
  PublicRegisterRoute: typeof PublicRegisterRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicForgotPasswordRoute: PublicForgotPasswordRoute,
  PublicLoginRoute: PublicLoginRoute,
  PublicRegisterRoute: PublicRegisterRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
